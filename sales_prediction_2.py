# -*- coding: utf-8 -*-
"""Sales_Prediction 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13sx9e8-HeeFBr5CSiT0uzTcKaCqOJ4Hy
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Load the dataset
df = pd.read_csv('/content/Sales_Data.csv')

# Basic data cleaning
# Remove rows with missing values
df.dropna(inplace=True)

display(df)

# Select features for prediction
features = ['advertising_spend', 'marketing_budget', 'num_products',
                'store_location', 'seasonal_factor', 'economic_indicator']

# Separate features and target variable
X = df[features]
Y = df['total_sales']

# Function to train the sales prediction model
def train_sales_prediction_model(X, Y):
     # Split the data into training and testing sets
      X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)
     # Scale the features
      scaler = StandardScaler()
      X_train_scaled = scaler.fit_transform(X_train)
      X_test_scaled = scaler.transform(X_test)
      return X_train_scaled, X_test_scaled, Y_train, Y_test,X,Y # Return the necessary variables

# Initialize and train the Random Forest Regressor
rf_model = RandomForestRegressor(
   n_estimators=100,  # Number of trees
   random_state=42,  #consistency of the model
   max_depth=10,
   min_samples_split=5
)

# Call the function to create X_train_scaled and y_train
X_train_scaled, X_test_scaled, Y_train, Y_test,X,Y  = train_sales_prediction_model(X, Y) # Assign the returned values

# Now you can use X_train_scaled and y_train
rf_model.fit(X_train_scaled, Y_train)

# Make predictions
Y_pred = rf_model.predict(X_test_scaled)

# Evaluate the model
mse = mean_squared_error(Y_test, Y_pred)
mae = mean_absolute_error(Y_test, Y_pred)
r2 = r2_score(Y_test, Y_pred)

# Print evaluation metrics
print("Model Performance Metrics:")
print(f"Mean Squared Error: {mse:.2f}")
print(f"Mean Absolute Error: {mae:.2f}")
print(f"R-squared Score: {r2:.2f}")

# Function to visualize predictions
def visualize_predictions(Y_test, Y_pred):
    plt.figure(figsize=(10, 6))
    plt.scatter(Y_test,Y_pred, color='blue', alpha=0.7)
    plt.plot([Y_test.min(), Y_test.max()], [Y_test.min(), Y_test.max()],
             color='red', linestyle='--', lw=2)
    plt.title('Actual vs Predicted Sales')
    plt.xlabel('Actual Sales')
    plt.ylabel('Predicted Sales')
    plt.tight_layout()
    plt.show()

    # ... (your model training and prediction code) ...

# Visualize the predictions
visualize_predictions(Y_test, Y_pred)

# Function to predict future sales
def predict_future_sales(model, scaler, new_data):

# Scale the new data
    new_data_scaled = scaler.transform(new_data)

 # Make predictions
    future_sales_predictions = model.predict(new_data_scaled)

    return future_sales_predictions

# Main execution
def main():
    # Path to your sales data CSV file
    # Replace with your actual file path
    file_path = '/content/Sales_Data.csv'

# Load and preprocess data
    X, y = load_and_preprocess_data(file_path)

    # Train the model
    model, scaler, (X_test, y_test, y_pred) = train_sales_prediction_model(X, y)
 # Visualize predictions
    visualize_predictions(y_test, y_pred)

# Example of predicting future sales
new_data = pd.DataFrame({
        'advertising_spend': [50000],
        'marketing_budget': [75000],
        'num_products': [10],
        'store_location': [2],
        'seasonal_factor': [1.2],
        'economic_indicator': [0.8]
    })

def main():
    # Path to your sales data CSV file
    file_path = '/content/Sales_Data.csv'

    # Load and preprocess data using load_and_preprocess_data if it's defined.
    # Assuming load_and_preprocess_data is defined and works correctly:
    #X, Y = load_and_preprocess_data(file_path)
    # If it's not defined, make sure you have a way to load your data here.
    # Using existing data loading snippet for this example:
    df = pd.read_csv(file_path)
    df.dropna(inplace=True)
    features = ['advertising_spend', 'marketing_budget', 'num_products',
                'store_location', 'seasonal_factor', 'economic_indicator']
    X = df[features]
    Y = df['total_sales']

    # Train the model and get model, scaler, etc.
    # Assuming train_sales_prediction_model returns model, scaler, and others:
    X_train_scaled, X_test_scaled, Y_train, Y_test, _, _ = train_sales_prediction_model(X, Y)
    # Initialize and train the Random Forest Regressor
    rf_model = RandomForestRegressor(
        n_estimators=100,  # Number of trees
        random_state=42,
        max_depth=10,
        min_samples_split=5
    )
    rf_model.fit(X_train_scaled, Y_train)

    # Scale the features
    scaler = StandardScaler()
    scaler.fit(X)

    # Now, rf_model and scaler are defined.

    # Make future predictions
    future_predictions = predict_future_sales(rf_model, scaler, new_data)  # Using rf_model instead of model
    print("\nFuture Sales Prediction:")
    print(future_predictions)

# Run the main function
if __name__ == "__main__":
    main()